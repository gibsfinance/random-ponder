import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  Block: p.createTable({
    id: p.hex(),
    hash: p.hex(),
    timestamp: p.bigint(),
    number: p.bigint(),
  }),
  Transaction: p.createTable({
    id: p.hex(),
    hash: p.hex(),
    index: p.bigint(),
    block: p.hex().references('Block.id'),
  }),
  Pointer: p.createTable({
    id: p.hex(),
    remaining: p.int(),
    count: p.int(),
    storage: p.hex(),
    lastOk: p.hex().references('Transaction.id'),
    provider: p.hex(),
    token: p.hex(),
    price: p.bigint(),
    duration: p.bigint(),
    durationIsTimestamp: p.boolean(),
    offset: p.bigint(),
  }),
  Ink: p.createTable({
    id: p.hex(), // section
    index: p.int(),
    transaction: p.hex().references('Transaction.id'),
    section: p.hex(),
    sender: p.hex(),
    pointer: p.hex().references('Pointer.id'),
  }),
  Start: p.createTable({
    id: p.hex(),
    owner: p.hex(),
    key: p.hex(),
    index: p.int(),
    chopped: p.boolean(),
    transaction: p.hex().references('Transaction.id'),
    heat: p.many('Heat.start'),
  }),
  Heat: p.createTable({
    id: p.hex(),
    transaction: p.hex().references('Transaction.id'),
    index: p.int(),
    preimage: p.hex().references('Preimage.id'),
    start: p.hex().optional().references('Start.id'),
  }),
  Preimage: p.createTable({
    id: p.hex(),
    index: p.bigint(),
    pointer: p.hex().references('Pointer.id'),
    accessed: p.boolean(),
    data: p.hex(),
    secret: p.hex().optional(),
    revealId: p.hex().optional().references('Reveal.id'),
    reveal: p.one('revealId'),
  }),
  Reveal: p.createTable({
    id: p.hex(),
    index: p.int(),
    preimage: p.hex().references('Preimage.id'),
    transaction: p.hex().references('Transaction.id'),
  }),
  Unveil: p.createTable({
    id: p.hex(),
    index: p.int(),
    transaction: p.hex().references('Transaction.id'),
    consumerPreimage: p.hex().references('ConsumerPreimage.id'),
  }),
  Chain: p.createTable({
    id: p.hex(),
    owner: p.hex(),
    identifier: p.bigint(),
    consumerPreimage: p.hex().references('ConsumerPreimage.id'),
    undermine: p.hex().references('Undermine.id'),
    start: p.hex().references('Start.id'),
    transaction: p.hex().references('Transaction.id'),
  }),
  Undermine: p.createTable({
    id: p.hex(),
    index: p.int(),
    transaction: p.hex().references('Transaction.id'),
    consumerPreimage: p.hex().references('ConsumerPreimage.id'),
    owner: p.hex(),
    chain: p.hex().references('Chain.id'),
  }),
  ConsumerPreimage: p.createTable({
    id: p.hex(),
    data: p.hex(),
    secret: p.hex().optional(),
    chain: p.hex().optional().references('Chain.consumerPreimage') as any,
    unveil: p.hex().optional().references('Unveil.consumerPreimage') as any,
    undermine: p.hex().optional().references('Undermine.consumerPreimage') as any,
  }),
}))
